//=======
//Globals
Texture2D shader_texture;
SamplerState sample_type;

cbuffer light_buffer
{
 float4 ambient_color;
 float4 diffuse_color;
 float3 light_direction;
 float padding;
};

//========
//TypeDefs
struct PIXEL_INPUT_TYPE
{
 float4 position : SV_POSITION;
 float2 tex : TEXCOORD0;
 float3 normal : NORMAL;
};

//===========
//PixelShader
float4 Light_pixel_shader(PIXEL_INPUT_TYPE input) : SV_TARGET
{
 float4 texture_color;
 float3 light_dir;
 float light_intensity;
 float4 color;

 //sample pixel color from the texture using the sampler at this texture coord loc
 texture_color = shader_texture.Sample(sample_type, input.tex);

 color = ambient_color;

 //invert light direction for calculations
 light_dir = -light_direction;

 //calc the amount of light
 light_intensity = saturate(dot(input.normal, light_dir));

 //determine the final amount of diffuse color based on diffuse color combined with light intensity
 if(light_intensity > 0.0f)
  color += diffuse_color * light_intensity;
 color = saturate(color);
 //texture pix * final diffuse color to get final pixel color result
 color = color * texture_color;
 return color;
}