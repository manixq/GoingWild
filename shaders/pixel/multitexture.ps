//=======
//Globals
Texture2D shader_texture[2];
SamplerState sample_type;

cbuffer light_buffer
{
 float4 ambient_color;
 float4 diffuse_color;
 float3 light_direction;
 float specular_power;
 float4 specular_color;
};

//========
//TypeDefs
struct PIXEL_INPUT_TYPE
{
 float4 position : SV_POSITION;
 float2 tex : TEXCOORD0;
 float3 normal : NORMAL;
 float3 view_direction : TEXCOORD1;
};

//===========
//PixelShader
float4 Multitexture_shader(PIXEL_INPUT_TYPE input) : SV_TARGET
{
 float4 texture_color[2];
 float3 light_dir;
 float light_intensity;
 float4 color;
 float3 reflection;
 float4 specular;
 float4 blend_color;

 //sample pixel color from the texture using the sampler at this texture coord loc
 texture_color[0] = shader_texture[0].Sample(sample_type, input.tex);
 texture_color[1] = shader_texture[1].Sample(sample_type, input.tex);

 blend_color = texture_color[0] * texture_color[1] * 2.0;
 blend_color = saturate(blend_color);
 //multitexturing is done

 color = ambient_color;

 specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

 //invert light direction for calculations
 light_dir = -light_direction;

 //calc the amount of light
 light_intensity = saturate(dot(input.normal, light_dir));

 //determine the final amount of diffuse color based on diffuse color combined with light intensity
 if(light_intensity > 0.0f)
  {
   color += diffuse_color * light_intensity;   
   color = saturate(color);
   reflection = normalize(2 * light_intensity * input.normal - light_dir);
   specular = pow(saturate(dot(reflection, input.view_direction)), specular_power);
  }
 //texture pix * final diffuse color to get final pixel color result
 color = color * blend_color;
 color = saturate(color + specular);
 return color;
}